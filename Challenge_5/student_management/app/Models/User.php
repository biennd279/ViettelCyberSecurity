<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\DatabaseNotification;
use Illuminate\Notifications\DatabaseNotificationCollection;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Hash;

/**
 * App\Models\User
 *
 * @property int $id
 * @property string $user_name
 * @property string $name
 * @property string $email
 * @property Carbon|null $email_verified_at
 * @property string $password
 * @property string $phone
 * @property string|null $remember_token
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 * @property-read DatabaseNotificationCollection|DatabaseNotification[] $notifications
 * @property-read int|null $notifications_count
 * @method static Builder|User newModelQuery()
 * @method static Builder|User newQuery()
 * @method static Builder|User query()
 * @method static Builder|User whereCreatedAt($value)
 * @method static Builder|User whereEmail($value)
 * @method static Builder|User whereEmailVerifiedAt($value)
 * @method static Builder|User whereId($value)
 * @method static Builder|User whereName($value)
 * @method static Builder|User wherePassword($value)
 * @method static Builder|User wherePhone($value)
 * @method static Builder|User whereRememberToken($value)
 * @method static Builder|User whereUpdatedAt($value)
 * @method static Builder|User whereUserName($value)
 * @mixin \Eloquent
 * @property string $role_id
 * @property-read Collection|Assignment[] $assignments
 * @property-read int|null $assignments_count
 * @property-read Collection|Message[] $messages
 * @property-read int|null $messages_count
 * @property-read Collection|Message[] $receiveMessages
 * @property-read int|null $receive_messages_count
 * @property-read Role $role
 * @property-read Collection|Submission[] $submissions
 * @property-read int|null $submissions_count
 * @method static Builder|User whereRoleId($value)
 */
class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'user_name',
        'name',
        'password',
        'email',
        'phone',
        'role_id',
        'google2fa_secret'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
        'google2fa_secret'
    ];

//    /**
//     * The attributes that should be cast to native types.
//     *
//     * @var array
//     */
//    protected $casts = [
//        'email_verified_at' => 'datetime',
//    ];


    public function isAdmin()
    {
        return $this->role->name == 'admin';
    }

    public function isTeacher()
    {
        return $this->role->name == 'teacher';
    }

    public function setPasswordAttribute($password)
    {
        $this->attributes['password'] = Hash::make($password);
    }

    public function role()
    {
        return $this->belongsTo('App\Models\Role');
    }

    public function assignments()
    {
        return $this->hasMany('App\Models\Assignment');
    }

    public function submissions()
    {
        return $this->hasMany('App\Models\Submission');
    }

    public function messages()
    {
        return $this->hasMany('App\Models\Message');
    }

    public function receiveMessages()
    {
        return $this->hasMany('App\Models\Message', 'receive_user_id');
    }

    public function delete()
    {
        $this->messages()->delete();
        $this->assignments()->delete();
        return parent::delete(); // TODO: Change the autogenerated stub
    }
}
